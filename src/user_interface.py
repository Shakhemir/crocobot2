from random import randint
from telebot import util
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from app import gpt
from src.settings import settings
from src.utils import log_error


def get_welcome_message(bot_title):
    text = (
        """
    üôã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç "%s"!</b>

    –≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ <b>–ö—Ä–æ–∫–æ–¥–∏–ª–∞</b>, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ <b>–≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö</b>.

    üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?</b>
    1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.
    2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.

    üõ†Ô∏è –ë–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ –∞–π—Ç–∏—à–Ω—ã–º —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π! üöÄ

    üïπ –û–±—â–∏–π —á–∞—Ç –∫—Ä–æ–∫–æ–¥–∏–ª–∞ –≥–¥–µ –º–æ–∂–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π: @game_crocochat

    üì© –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @kudanoff
    """
        % bot_title
    )
    return dict(
        text=text,
        parse_mode="html",
    )


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–µ–¥—É—â–µ–≥–æ
make_lead_markup = InlineKeyboardMarkup()
want_to_lead_btn = InlineKeyboardButton(
    "–°—Ç–∞—Ç—å –≤–µ–¥—É—â–∏–º üê≥", callback_data="want_to_lead"
)
make_lead_markup.add(want_to_lead_btn)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ
leader_markup = InlineKeyboardMarkup()
change_word_btn = InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å", callback_data="change_word")
view_word_btn = InlineKeyboardButton("üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_word")
leader_markup.add(change_word_btn, view_word_btn)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
clear_stats_markup = InlineKeyboardMarkup()
clear_btn = InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_stats")
clear_stats_markup.add(clear_btn)


def get_clear_stats_message():
    text = "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã?"
    return dict(text=text, reply_markup=clear_stats_markup)


def get_correct_word_form(count):
    if count % 10 == 1 and count % 100 != 11:
        return "–º–∏–Ω—É—Ç–∞"
    elif 2 <= count % 10 <= 4 and not (12 <= count % 100 <= 14):
        return "–º–∏–Ω—É—Ç—ã"
    else:
        return "–º–∏–Ω—É—Ç"


def get_start_game_message(user, minutes):
    user_name = util.user_link(user)
    m = get_correct_word_form(minutes)
    text = f"üïπ <b>–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>\n\n<b>{user_name}</b> –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ ‚ö°Ô∏è\n–í—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞ <b>{minutes}</b> {m}\n\n–í–µ–¥—É—â–∏–π, –æ–±—ä—è—Å–Ω—è–π —Å–ª–æ–≤–æ –∏–≥—Ä–æ–∫–∞–º"
    return dict(
        text=text,
        parse_mode="html",
        reply_markup=leader_markup,
    )


def get_lead_game_message(user, minutes):
    user_name = util.user_link(user)
    m = get_correct_word_form(minutes)
    word_of_gpt = gpt_injection()
    text = f"<b>{user_name}</b> –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ ‚ö°Ô∏è\n–í—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞ <b>{minutes}</b> {m}\n{word_of_gpt}"
    return dict(
        text=text,
        parse_mode="html",
        reply_markup=leader_markup,
    )


def get_game_already_started_message():
    text = "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ –µ—â–µ –Ω–µ –æ—Ç–≥–∞–¥–∞–Ω–æ."
    return dict(text=text)


def get_end_game_message(word):
    word_of_gpt = gpt_injection(
        "–ù–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –¢–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ—Ä—É —Å—Ç—Ä–æ–≥–∏–º, —Å —Ç–æ–Ω–∫–æ–π –Ω–æ—Ç–∫–æ–π –∑–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —é–º–æ—Ä–∞ –∏ —Å –Ω–µ –±–æ–ª–µ–µ 210 —Å–∏–º–≤–æ–ª–æ–≤. –í —Ç–µ–∫—Å—Ç–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ ¬´–ö—Ä–æ–∫–æ–¥–∏–ª¬ª. –£–ø–æ–º—è–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ: . –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
    )
    text = (
        f"<b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ :(</b>\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: <b>{word}</b>.\n{word_of_gpt}\n"
        f"–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É."
    )
    return dict(text=text, reply_markup=make_lead_markup, parse_mode="HTML")


def get_new_game_message(user, current_word):
    user_link = util.user_link(user)
    word_of_gpt = gpt_injection(
        "–ù–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ, –≥–¥–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –¢–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ—Ä—É —Å—Ç—Ä–æ–≥–∏–º, —Å —Ç–æ–Ω–∫–æ–π –Ω–æ—Ç–∫–æ–π –∑–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —é–º–æ—Ä–∞ –∏ —Å –Ω–µ –±–æ–ª–µ–µ 210 —Å–∏–º–≤–æ–ª–æ–≤. –í —Ç–µ–∫—Å—Ç–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ ¬´–ö—Ä–æ–∫–æ–¥–∏–ª¬ª. –î–æ–±–∞–≤—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–µ–¥—É—â–µ–º—É –∏ —É–∫–∞–∂–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–∫–æ—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –£–ø–æ–º—è–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ: –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–∫–æ—Ä–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
    )
    text = f"‚ö°Ô∏è {user_link} –æ—Ç–≥–∞–¥–∞–ª(-–∞) —Å–ª–æ–≤–æ <b>{current_word}</b>!\n{word_of_gpt}\n–ö—Ç–æ —Ö–æ—á–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –≤–µ–¥—É—â–∏–º?"
    return dict(text=text, reply_markup=make_lead_markup, parse_mode="HTML")


def get_fault_message(user_id, user_name):
    user_name = util.escape(user_name)
    user_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
    text = f"–ò–≥—Ä–æ–∫ {user_link} –±—ã–ª –ª–∏—à—ë–Ω –æ–¥–Ω–æ–≥–æ –æ—á–∫–∞ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–∫–∞–∑ —Å—Ç–∞—Ç—å –≤–µ–¥—É—â–∏–º –≤ –∏–≥—Ä–µ. –ù—É, –±—ã–≤–∞–µ—Ç:))"
    return dict(text=text, parse_mode="HTML")


def gpt_injection(prompt: str = None) -> str:
    """
    –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç –º–æ–¥–µ–ª–∏ ChatGPT.
    –ß—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª, –Ω–∞–¥–æ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª gpt-prompt.txt.
    –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑,
    –∫–æ–≥–¥–∞ –∫ –Ω–µ–π –æ–±—Ä–∞—â–∞—é—Ç—Å—è. –ü–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –±–æ—Ç–∞,
    –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–æ–º–ø—Ç.
    """
    if settings.GPT_INJECTION:
        if prompt is None:
            try:
                with open(settings.PROMPT_FILE, encoding="utf-8") as f:
                    prompt = f.read().strip()
            except FileNotFoundError:
                prompt = ""

        if prompt and randint(1, 5) == 1:
            try:
                gpt_joke = "\n" + gpt.generate_answer(prompt) + "\n"
                return f"<i>{gpt_joke}</i>"
            except Exception as e:
                log_error(str(e))
    return ""
